{"version":3,"sources":["../../src/utils/request.js"],"names":["get","post","put","del","TOKEN_KEY","url","opts","_","merge","method","headers","cache","credentials","token","window","localStorage","getItem","onError","result","errorHandler","errmsg","isFunction","error","res","data","status","json","errcode","errstack","console","request","body"],"mappings":"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","file":"request.js","sourcesContent":["import fetch from 'isomorphic-fetch'\nimport { message } from 'antd'\nimport _ from 'lodash'\n\nconst TOKEN_KEY = 'token'\n\n/**\n * 底层请求封装\n * @param url\n * @param body\n * @param [opts]\n * @return {Promise}\n */\nasync function request (url, opts) {\n  // 配置加工\n  opts = _.merge({\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    cache: 'no-cache',\n    credentials: 'include'\n  }, opts)\n  const token = window.localStorage.getItem(TOKEN_KEY)\n  if (token && !opts.headers.token) {\n    opts.headers.token = token\n  }\n  const onError = _.result(opts, 'onError', null)\n  delete opts.onError\n\n  // 定义异常处理器\n  const errorHandler = async (errmsg) => {\n    if (onError !== null) {\n      if (_.isFunction(onError)) {\n        onError(errmsg)\n      }\n    } else {\n      errmsg = errmsg || 'Network error'\n      message.error(errmsg)\n    }\n  }\n\n  // 执行请求\n  const res = await fetch(url, opts)\n  let data = null\n  if (res.status >= 200 && res.status < 300) {\n    const json = await res.json()\n    if (json.errcode || json.errmsg) {\n      if (json.errstack) {\n        console.error(json.errstack)\n      }\n      await errorHandler(json.errmsg)\n    } else {\n      data = _.result(json, 'data', json)\n    }\n  } else {\n    await errorHandler()\n  }\n  return data\n}\n\n/**\n * 常规GET请求\n * @param url\n * @param [opts]\n * @return {Promise}\n */\nexport function get (url, opts) {\n  return request(url, opts)\n}\n\n/**\n * 常规POST请求\n * @param url\n * @param body\n * @param [opts]\n * @return {Promise}\n */\nexport function post (url, body, opts) {\n  return request(url, _.merge({\n    method: 'POST',\n    body: JSON.stringify(body)\n  }, opts))\n}\n\n/**\n * 常规PUT请求\n * @param url\n * @param body\n * @param [opts]\n * @return {Promise}\n */\nexport function put (url, body, opts) {\n  return request(url, _.merge({\n    method: 'PUT',\n    body: JSON.stringify(body)\n  }, opts))\n}\n\n/**\n * 常规DELETE请求\n * @param url\n * @param body\n * @param [opts]\n * @return {Promise}\n */\nexport function del (url, body, opts) {\n  return request(url, _.merge({\n    method: 'DELETE',\n    body: JSON.stringify(body)\n  }, opts))\n}\n\nexport default request\n"]}