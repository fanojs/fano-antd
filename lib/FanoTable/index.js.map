{"version":3,"sources":["../../src/FanoTable/index.jsx"],"names":["_","isFunction","window","L","key","value","FanoTable","c","config","options","isPlainObject","merge","Error","fromJson","json","props","combineExpandProps","columnExpand","columns","column","expand","dataIndex","length","push","cloneDeep","React","Component","fromUrl","url","isString","then","Array","isArray","get","list","catch","e","fromMeta","code","metaUrl","qs","stringify"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react'\nimport qs from 'qs'\nimport _ from 'lodash'\nimport { get } from '../utils/request'\nimport DynamicTable from './DynamicTable'\n\nif (!_.isFunction(window.L)) {\n  window.L = (key, value) => {\n    return value || key\n  }\n}\n\n/**\n * 表格组件\n */\nclass FanoTable { }\n\nFanoTable.c = {}\n\n/**\n * 全局配置\n * @param {*} options 配置项\n */\nFanoTable.config = (options) => {\n  if (_.isPlainObject(options)) {\n    _.merge(FanoTable.c, options)\n  } else {\n    throw new Error(`Invalid options`)\n  }\n}\n\n/**\n * 使用JSON配置生成表格\n * @param {*} json JSON配置\n */\nFanoTable.fromJson = (json) => {\n  return (\n    class FanoComponent extends React.Component {\n      constructor (props) {\n        super(props)\n        this.combineExpandProps(json)\n      }\n\n      combineExpandProps (json) {\n        const { columnExpand } = this.props\n        if (!_.isPlainObject(columnExpand)) {\n          return\n        }\n\n        for (const column of json.columns) {\n          const expand = columnExpand[column.dataIndex]\n          if (_.isPlainObject(expand)) {\n            _.merge(column, expand)\n          }\n          delete columnExpand[column.dataIndex]\n        }\n        if (Object.keys(columnExpand).length > 0) {\n          for (const dataIndex in columnExpand) {\n            const value = columnExpand[dataIndex]\n            value.dataIndex = dataIndex\n            json.columns.push(_.cloneDeep(value))\n          }\n        }\n      }\n\n      render () {\n        return (\n          <DynamicTable {...this.props}\n            c={FanoTable.c}\n            config={json}\n          />\n        )\n      }\n    }\n  )\n}\n\n/**\n * 通过URL获取配置后再生成表格\n * @param {*} url 配置URL\n */\nFanoTable.fromUrl = (url) => {\n  if (!_.isString(url)) {\n    throw new Error(`Invalid 'url': ${url}`)\n  }\n  get(url)\n    .then(json => {\n      if (Array.isArray(_.get(json, 'list'))) {\n        FanoTable.fromJson(json.list)\n      } else {\n        throw new Error(`Invalid 'url' format`)\n      }\n    })\n    .catch(e => { throw e })\n}\n\n/**\n * 通过元数据编码获取配置后再生成表格\n * @param {*} code 元数据编码\n */\nFanoTable.fromMeta = (code) => {\n  if (!_.isString(code)) {\n    throw new Error(`Invalid code: ${code}`)\n  } else if (!_.isString(FanoTable.c.metaUrl)) {\n    throw new Error(`Invalid 'metaUrl' format`)\n  }\n  get(`${FanoTable.c.metaUrl}?${qs.stringify({ code })}`)\n    .then(json => {\n      if (Array.isArray(_.get(json, 'list'))) {\n        FanoTable.fromJson(json.list)\n      } else {\n        throw new Error(`Invalid 'metaUrl' format`)\n      }\n    })\n    .catch(e => { throw e })\n}\n\nexport default FanoTable\n"]}