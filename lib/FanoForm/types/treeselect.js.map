{"version":3,"sources":["../../../src/FanoForm/types/treeselect.jsx"],"names":["TreeNode","FanoFormTreeSelect","props","injectProps","field","url","dict","max","simpleMode","treeData","transformKeysMap","transformSimpleData","state","plainValues","getPlainValues","transformed","transformProps","disabledOptions","getDisabledOptions","value","multi","onChange","bind","recursive","container","values","item","push","Array","isArray","children","_","uniq","isNumber","length","difference","allowInput","expandAll","ignoreCase","treeCheckable","showSearch","treeDefaultExpandAll","filterTreeNode","inputValue","treeNode","RegExp","test","title","isEmpty","tree","customID","parentProperty","childrenProperty","keysMap","isPlainObject","titleKey","valueKey","pid","pidKey","dictUrl","c","fetchOptions","Error","qs","stringify","cond","JSON","code","beforeFetch","isFunction","then","json","get","list","setState","catch","e","array","key","disabled","indexOf","disableCheckbox","pick","renderTreeData","Object","assign","React","Component"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport qs from 'qs'\nimport { TreeSelect } from 'antd'\nimport _ from 'lodash'\nimport arrayToTree from 'array-to-tree'\nimport { get } from '../../utils/request'\nimport { getProps } from '../../utils/form'\n\nconst TreeNode = TreeSelect.TreeNode\n\nexport default class FanoFormTreeSelect extends React.Component {\n  constructor (props) {\n    super(props)\n    const { url, dict, max, simpleMode } = props.injectProps.field.props\n    let { treeData = [] } = props.injectProps.field.props\n    if (simpleMode) {\n      this.transformKeysMap(treeData, simpleMode)\n      treeData = this.transformSimpleData(treeData)\n    }\n    this.state = {\n      url,\n      dict,\n      treeData,\n      simpleMode,\n      max,\n      plainValues: this.getPlainValues(treeData),\n      transformed: this.transformProps()\n    }\n    this.state.disabledOptions = this.getDisabledOptions(this.state.plainValues, this.props.value)\n    this.state.multi = !!this.state.transformed.multi\n    this.onChange = this.onChange.bind(this)\n  }\n\n  getPlainValues (treeData) {\n    const recursive = (container, values) => {\n      for (const item of values) {\n        container.push(item.value)\n        if (Array.isArray(item.children)) {\n          recursive(container, item.children)\n        }\n      }\n    }\n\n    let plainValues = []\n    recursive(plainValues, treeData)\n    plainValues = _.uniq(plainValues)\n    return plainValues\n  }\n\n  getDisabledOptions (plainValues, value) {\n    const { max, multi } = this.state\n    if (multi === true) {\n      let disabledOptions = []\n      if (_.isNumber(max) && value.length >= max) {\n        if (value.length > max) {\n          value = this.props.value\n        }\n        disabledOptions = _.difference(plainValues, value)\n      }\n      return disabledOptions\n    }\n    return this.state.disabledOptions || []\n  }\n\n  transformProps () {\n    const props = {}\n    const { max, allowInput, expandAll, ignoreCase = true } = this.props.injectProps.field.props\n    if (_.isNumber(max)) {\n      if (max > 1) {\n        props.treeCheckable = true\n      }\n    }\n    if (allowInput === true) {\n      props.showSearch = true\n    }\n    if (expandAll === true) {\n      props.treeDefaultExpandAll = true\n    }\n    props.multi = !!props.treeCheckable\n    props.filterTreeNode = (inputValue, treeNode) => new RegExp(inputValue, ignoreCase === true ? 'mi' : 'm').test(treeNode.props.title)\n    return props\n  }\n\n  transformSimpleData (treeData) {\n    if (_.isEmpty(treeData)) {\n      return treeData\n    }\n    const tree = arrayToTree(treeData, {\n      customID: 'value',\n      parentProperty: 'pid',\n      childrenProperty: 'children'\n    })\n    return tree\n  }\n\n  transformKeysMap (treeData, keysMap) {\n    if (!_.isPlainObject(keysMap)) {\n      return\n    }\n    for (const item of treeData) {\n      item.title = item[keysMap.titleKey]\n      item.value = item[keysMap.valueKey]\n      item.pid = item[keysMap.pidKey]\n      delete item[keysMap.titleKey]\n      delete item[keysMap.valueKey]\n      delete item[keysMap.pidKey]\n      if (Array.isArray(item.children)) {\n        this.transformKeysMap(item.children, keysMap)\n      }\n    }\n  }\n\n  componentDidMount () {\n    const { dictUrl } = this.props.injectProps.c\n    if (_.isEmpty(this.state.treeData)) {\n      if (!_.isEmpty(this.state.url)) {\n        this.fetchOptions(this.state.url)\n      } else if (!_.isEmpty(this.state.dict)) {\n        if (_.isEmpty(dictUrl)) {\n          throw new Error(`Invalid 'dictUrl'`)\n        }\n        this.fetchOptions(`${dictUrl}?${qs.stringify({\n          cond: JSON.stringify({ code: this.state.dict }, null, 0)\n        })}`)\n      }\n    }\n  }\n\n  fetchOptions (url) {\n    const { beforeFetch } = this.props.injectProps.field.props\n    if (_.isFunction(beforeFetch)) {\n      url = beforeFetch(url, this.props.injectProps.field)\n    }\n    get(url)\n      .then(json => {\n        if (Array.isArray(_.get(json, 'list'))) {\n          const state = {\n            treeData: json.list,\n            plainValues: this.getPlainValues(json.list)\n          }\n          if (this.state.simpleMode) {\n            this.transformKeysMap(state.treeData, this.state.simpleMode)\n            state.treeData = this.transformSimpleData(state.treeData)\n          }\n          state.disabledOptions = this.getDisabledOptions(state.plainValues, this.props.value)\n          this.setState(state)\n        } else {\n          throw new Error(`Invalid 'url' format`)\n        }\n      })\n      .catch(e => { throw e })\n  }\n\n  onChange (value) {\n    this.setState({ disabledOptions: this.getDisabledOptions(this.state.plainValues, value) })\n    return this.props.onChange(value)\n  }\n\n  renderTreeData (values) {\n    const { disabledOptions } = this.state\n    const array = []\n    for (const item of values) {\n      item.key = item.value\n      item.disabled = disabledOptions.indexOf(item.value) >= 0\n      item.disableCheckbox = item.disabled\n      const props = _.pick(item, ['key', 'title', 'value', 'disableCheckbox', 'disabled', 'isLeaf'])\n      if (Array.isArray(item.children)) {\n        array.push(<TreeNode {...props}>{this.renderTreeData(item.children)}</TreeNode>)\n      } else {\n        array.push(<TreeNode {...props} />)\n      }\n    }\n    return array\n  }\n\n  render () {\n    const { treeData, transformed, multi } = this.state\n    const props = getProps(this.props, [\n      'placeholder',\n      'allowClear',\n      'disabled'\n    ])\n    Object.assign(props, transformed)\n    if (multi === true) {\n      props.onChange = this.onChange\n    }\n    return (\n      <TreeSelect {...props}>\n        {this.renderTreeData(treeData)}\n      </TreeSelect>\n    )\n  }\n}\n"],"file":"treeselect.js"}