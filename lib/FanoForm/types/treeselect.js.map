{"version":3,"sources":["../../../src/FanoForm/types/treeselect.jsx"],"names":["TreeNode","FanoFormTreeSelect","props","injectProps","field","url","dict","max","simpleMode","treeData","transformKeysMap","transformSimpleData","state","plainValues","getPlainValues","transformed","transformProps","disabledOptions","getDisabledOptions","value","multi","onChange","bind","recursive","container","values","item","push","Array","isArray","children","_","uniq","isNumber","length","difference","allowInput","expandAll","ignoreCase","treeCheckable","showSearch","treeDefaultExpandAll","filterTreeNode","inputValue","treeNode","RegExp","test","title","isEmpty","tree","customID","parentProperty","childrenProperty","keysMap","isPlainObject","titleKey","valueKey","pid","pidKey","dictUrl","c","fetchOptions","Error","qs","stringify","cond","code","beforeFetch","isFunction","then","get","json","list","setState","catch","e","array","key","disabled","indexOf","disableCheckbox","pick","renderTreeData","React","Component"],"mappings":"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","file":"treeselect.js","sourcesContent":["\nimport React from 'react'\nimport qs from 'qs'\nimport { TreeSelect } from 'antd'\nimport _ from 'lodash'\nimport arrayToTree from 'array-to-tree'\nimport { get } from '../../utils/request'\nimport { getProps } from '../../utils/form'\n\nconst TreeNode = TreeSelect.TreeNode\n\nexport default class FanoFormTreeSelect extends React.Component {\n  constructor (props) {\n    super(props)\n    const { url, dict, max, simpleMode } = props.injectProps.field.props\n    let { treeData = [] } = props.injectProps.field.props\n    if (simpleMode) {\n      this.transformKeysMap(treeData, simpleMode)\n      treeData = this.transformSimpleData(treeData)\n    }\n    this.state = {\n      url,\n      dict,\n      treeData,\n      simpleMode,\n      max,\n      plainValues: this.getPlainValues(treeData),\n      transformed: this.transformProps()\n    }\n    this.state.disabledOptions = this.getDisabledOptions(this.state.plainValues, this.props.value)\n    this.state.multi = !!this.state.transformed.multi\n    this.onChange = this.onChange.bind(this)\n  }\n\n  getPlainValues (treeData) {\n    const recursive = (container, values) => {\n      for (const item of values) {\n        container.push(item.value)\n        if (Array.isArray(item.children)) {\n          recursive(container, item.children)\n        }\n      }\n    }\n\n    let plainValues = []\n    recursive(plainValues, treeData)\n    plainValues = _.uniq(plainValues)\n    return plainValues\n  }\n\n  getDisabledOptions (plainValues, value) {\n    const { max, multi } = this.state\n    if (multi === true) {\n      let disabledOptions = []\n      if (_.isNumber(max) && value.length >= max) {\n        if (value.length > max) {\n          value = this.props.value\n        }\n        disabledOptions = _.difference(plainValues, value)\n      }\n      return disabledOptions\n    }\n    return this.state.disabledOptions || []\n  }\n\n  transformProps () {\n    const props = {}\n    const { max, allowInput, expandAll, ignoreCase = true } = this.props.injectProps.field.props\n    if (_.isNumber(max)) {\n      if (max > 1) {\n        props.treeCheckable = true\n      }\n    }\n    if (allowInput === true) {\n      props.showSearch = true\n    }\n    if (expandAll === true) {\n      props.treeDefaultExpandAll = true\n    }\n    props.multi = !!props.treeCheckable\n    props.filterTreeNode = (inputValue, treeNode) => new RegExp(inputValue, ignoreCase === true ? 'mi' : 'm').test(treeNode.props.title)\n    return props\n  }\n\n  transformSimpleData (treeData) {\n    if (_.isEmpty(treeData)) {\n      return treeData\n    }\n    const tree = arrayToTree(treeData, {\n      customID: 'value',\n      parentProperty: 'pid',\n      childrenProperty: 'children'\n    })\n    return tree\n  }\n\n  transformKeysMap (treeData, keysMap) {\n    if (!_.isPlainObject(keysMap)) {\n      return\n    }\n    for (const item of treeData) {\n      item.title = item[keysMap.titleKey]\n      item.value = item[keysMap.valueKey]\n      item.pid = item[keysMap.pidKey]\n      delete item[keysMap.titleKey]\n      delete item[keysMap.valueKey]\n      delete item[keysMap.pidKey]\n      if (Array.isArray(item.children)) {\n        this.transformKeysMap(item.children, keysMap)\n      }\n    }\n  }\n\n  componentDidMount () {\n    const { dictUrl } = this.props.injectProps.c\n    if (_.isEmpty(this.state.treeData)) {\n      if (!_.isEmpty(this.state.url)) {\n        this.fetchOptions(this.state.url)\n      } else if (!_.isEmpty(this.state.dict)) {\n        if (_.isEmpty(dictUrl)) {\n          throw new Error(`Invalid 'dictUrl'`)\n        }\n        this.fetchOptions(`${dictUrl}?${qs.stringify({\n          cond: JSON.stringify({ code: this.state.dict }, null, 0)\n        })}`)\n      }\n    }\n  }\n\n  fetchOptions (url) {\n    const { beforeFetch } = this.props.injectProps.field.props\n    if (_.isFunction(beforeFetch)) {\n      url = beforeFetch(url, this.props.injectProps.field)\n    }\n    get(url)\n      .then(json => {\n        if (Array.isArray(_.get(json, 'list'))) {\n          const state = {\n            treeData: json.list,\n            plainValues: this.getPlainValues(json.list)\n          }\n          if (this.state.simpleMode) {\n            this.transformKeysMap(state.treeData, this.state.simpleMode)\n            state.treeData = this.transformSimpleData(state.treeData)\n          }\n          state.disabledOptions = this.getDisabledOptions(state.plainValues, this.props.value)\n          this.setState(state)\n        } else {\n          throw new Error(`Invalid 'url' format`)\n        }\n      })\n      .catch(e => { throw e })\n  }\n\n  onChange (value) {\n    this.setState({ disabledOptions: this.getDisabledOptions(this.state.plainValues, value) })\n    return this.props.onChange(value)\n  }\n\n  renderTreeData (values) {\n    const { disabledOptions } = this.state\n    const array = []\n    for (const item of values) {\n      item.key = item.value\n      item.disabled = disabledOptions.indexOf(item.value) >= 0\n      item.disableCheckbox = item.disabled\n      const props = _.pick(item, ['key', 'title', 'value', 'disableCheckbox', 'disabled', 'isLeaf'])\n      if (Array.isArray(item.children)) {\n        array.push(<TreeNode {...props}>{this.renderTreeData(item.children)}</TreeNode>)\n      } else {\n        array.push(<TreeNode {...props} />)\n      }\n    }\n    return array\n  }\n\n  render () {\n    const { treeData, transformed, multi } = this.state\n    const props = getProps(this.props, [\n      'placeholder',\n      'allowClear',\n      'disabled'\n    ])\n    Object.assign(props, transformed)\n    if (multi === true) {\n      props.onChange = this.onChange\n    }\n    return (\n      <TreeSelect {...props}>\n        {this.renderTreeData(treeData)}\n      </TreeSelect>\n    )\n  }\n}\n"]}