{"version":3,"sources":["../../../src/FanoForm/types/checkbox.jsx"],"names":["CheckboxGroup","Group","FanoFormCheckbox","props","injectProps","field","url","dict","options","max","state","multi","plainValues","map","o","value","disabledOptions","getDisabledOptions","onChange","bind","_","isNumber","length","difference","dictUrl","c","isEmpty","fetchOptions","Error","qs","stringify","cond","code","beforeFetch","isFunction","then","Array","isArray","get","json","list","setState","catch","e","children","option","label","disabled","indexOf","push","React","Component"],"mappings":"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","file":"checkbox.js","sourcesContent":["\nimport React from 'react'\nimport qs from 'qs'\nimport { Checkbox } from 'antd'\nimport _ from 'lodash'\nimport { get } from '../../utils/request'\nimport { getProps } from '../../utils/form'\n\nconst CheckboxGroup = Checkbox.Group\n\nexport default class FanoFormCheckbox extends React.Component {\n  constructor (props) {\n    super(props)\n    const { url, dict, options = [], max } = props.injectProps.field.props\n    this.state = {\n      url,\n      dict,\n      options,\n      max,\n      multi: true,\n      plainValues: options.map(o => o.value)\n    }\n    this.state.disabledOptions = this.getDisabledOptions(this.state.plainValues, this.props.value)\n    this.onChange = this.onChange.bind(this)\n  }\n\n  getDisabledOptions (plainValues, value) {\n    const { max, multi } = this.state\n    if (multi === true) {\n      let disabledOptions = []\n      if (_.isNumber(max) && value.length >= max) {\n        if (value.length > max) {\n          value = this.props.value\n        }\n        disabledOptions = _.difference(plainValues, value)\n      }\n      return disabledOptions\n    }\n    return this.state.disabledOptions || []\n  }\n\n  componentDidMount () {\n    const { dictUrl } = this.props.injectProps.c\n    if (_.isEmpty(this.state.options)) {\n      if (!_.isEmpty(this.state.url)) {\n        this.fetchOptions(this.state.url)\n      } else if (!_.isEmpty(this.state.dict)) {\n        if (_.isEmpty(dictUrl)) {\n          throw new Error(`Invalid 'dictUrl'`)\n        }\n        this.fetchOptions(`${dictUrl}?${qs.stringify({\n          cond: JSON.stringify({ code: this.state.dict }, null, 0)\n        })}`)\n      }\n    }\n  }\n\n  fetchOptions (url) {\n    const { beforeFetch } = this.props.injectProps.field.props\n    if (_.isFunction(beforeFetch)) {\n      url = beforeFetch(url, this.props.injectProps.field)\n    }\n    get(url)\n      .then(json => {\n        if (Array.isArray(_.get(json, 'list'))) {\n          const state = {\n            options: json.list,\n            plainValues: json.list.map(o => o.value)\n          }\n          state.disabledOptions = this.getDisabledOptions(state.plainValues, this.props.value)\n          this.setState(state)\n        } else {\n          throw new Error(`Invalid 'url' format`)\n        }\n      })\n      .catch(e => { throw e })\n  }\n\n  onChange (value) {\n    this.setState({ disabledOptions: this.getDisabledOptions(this.state.plainValues, value) })\n    return this.props.onChange(value)\n  }\n\n  render () {\n    const { options, disabledOptions } = this.state\n    const props = getProps(this.props, [\n      'disabled'\n    ])\n    const children = []\n    for (const option of options) {\n      const { label, value } = option\n      const disabled = disabledOptions.indexOf(value) >= 0\n      children.push(<Checkbox key={value} value={value} disabled={disabled}>{label}</Checkbox>)\n    }\n    props.onChange = this.onChange\n    return (\n      <CheckboxGroup {...props}>{children}</CheckboxGroup>\n    )\n  }\n}\n"]}