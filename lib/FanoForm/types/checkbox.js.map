{"version":3,"sources":["../../../src/FanoForm/types/checkbox.jsx"],"names":["CheckboxGroup","Group","FanoFormCheckbox","props","injectProps","field","url","dict","options","max","state","multi","plainValues","map","o","value","disabledOptions","getDisabledOptions","onChange","bind","_","isNumber","length","difference","dictUrl","c","isEmpty","fetchOptions","Error","qs","stringify","cond","JSON","code","beforeFetch","isFunction","then","json","Array","isArray","get","list","setState","catch","e","children","option","label","disabled","indexOf","push","React","Component"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport qs from 'qs'\nimport { Checkbox } from 'antd'\nimport _ from 'lodash'\nimport { get } from '../../utils/request'\nimport { getProps } from '../../utils/form'\n\nconst CheckboxGroup = Checkbox.Group\n\nexport default class FanoFormCheckbox extends React.Component {\n  constructor (props) {\n    super(props)\n    const { url, dict, options = [], max } = props.injectProps.field.props\n    this.state = {\n      url,\n      dict,\n      options,\n      max,\n      multi: true,\n      plainValues: options.map(o => o.value)\n    }\n    this.state.disabledOptions = this.getDisabledOptions(this.state.plainValues, this.props.value)\n    this.onChange = this.onChange.bind(this)\n  }\n\n  getDisabledOptions (plainValues, value) {\n    const { max, multi } = this.state\n    if (multi === true) {\n      let disabledOptions = []\n      if (_.isNumber(max) && value.length >= max) {\n        if (value.length > max) {\n          value = this.props.value\n        }\n        disabledOptions = _.difference(plainValues, value)\n      }\n      return disabledOptions\n    }\n    return this.state.disabledOptions || []\n  }\n\n  componentDidMount () {\n    const { dictUrl } = this.props.injectProps.c\n    if (_.isEmpty(this.state.options)) {\n      if (!_.isEmpty(this.state.url)) {\n        this.fetchOptions(this.state.url)\n      } else if (!_.isEmpty(this.state.dict)) {\n        if (_.isEmpty(dictUrl)) {\n          throw new Error(`Invalid 'dictUrl'`)\n        }\n        this.fetchOptions(`${dictUrl}?${qs.stringify({\n          cond: JSON.stringify({ code: this.state.dict }, null, 0)\n        })}`)\n      }\n    }\n  }\n\n  fetchOptions (url) {\n    const { beforeFetch } = this.props.injectProps.field.props\n    if (_.isFunction(beforeFetch)) {\n      url = beforeFetch(url, this.props.injectProps.field)\n    }\n    get(url)\n      .then(json => {\n        if (Array.isArray(_.get(json, 'list'))) {\n          const state = {\n            options: json.list,\n            plainValues: json.list.map(o => o.value)\n          }\n          state.disabledOptions = this.getDisabledOptions(state.plainValues, this.props.value)\n          this.setState(state)\n        } else {\n          throw new Error(`Invalid 'url' format`)\n        }\n      })\n      .catch(e => { throw e })\n  }\n\n  onChange (value) {\n    this.setState({ disabledOptions: this.getDisabledOptions(this.state.plainValues, value) })\n    return this.props.onChange(value)\n  }\n\n  render () {\n    const { options, disabledOptions } = this.state\n    const props = getProps(this.props, [\n      'disabled'\n    ])\n    const children = []\n    for (const option of options) {\n      const { label, value } = option\n      const disabled = disabledOptions.indexOf(value) >= 0\n      children.push(<Checkbox key={value} value={value} disabled={disabled}>{label}</Checkbox>)\n    }\n    props.onChange = this.onChange\n    return (\n      <CheckboxGroup {...props}>{children}</CheckboxGroup>\n    )\n  }\n}\n"],"file":"checkbox.js"}