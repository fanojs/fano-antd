{"version":3,"sources":["../../../src/FanoForm/types/radio.jsx"],"names":["RadioButton","Button","RadioGroup","Group","FanoFormRadio","props","injectProps","field","url","dict","options","showButtonStyle","state","dictUrl","c","_","isEmpty","fetchOptions","Error","qs","stringify","cond","JSON","code","beforeFetch","isFunction","then","json","Array","isArray","get","setState","list","catch","e","children","option","label","value","push","React","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport qs from 'qs'\nimport { Radio } from 'antd'\nimport _ from 'lodash'\nimport { get } from '../../utils/request'\nimport { getProps } from '../../utils/form'\n\nconst RadioButton = Radio.Button\nconst RadioGroup = Radio.Group\n\nexport default class FanoFormRadio extends React.Component {\n  constructor (props) {\n    super(props)\n    const { url, dict, options = [], showButtonStyle = false } = props.injectProps.field.props\n    this.state = {\n      url,\n      dict,\n      options,\n      showButtonStyle\n    }\n  }\n\n  componentDidMount () {\n    const { dictUrl } = this.props.injectProps.c\n    if (_.isEmpty(this.state.options)) {\n      if (!_.isEmpty(this.state.url)) {\n        this.fetchOptions(this.state.url)\n      } else if (!_.isEmpty(this.state.dict)) {\n        if (_.isEmpty(dictUrl)) {\n          throw new Error(`Invalid 'dictUrl'`)\n        }\n        this.fetchOptions(`${dictUrl}?${qs.stringify({\n          cond: JSON.stringify({ code: this.state.dict }, null, 0)\n        })}`)\n      }\n    }\n  }\n\n  fetchOptions (url) {\n    const { beforeFetch } = this.props.injectProps.field.props\n    if (_.isFunction(beforeFetch)) {\n      url = beforeFetch(url, this.props.injectProps.field)\n    }\n    get(url)\n      .then(json => {\n        if (Array.isArray(_.get(json, 'list'))) {\n          this.setState({\n            options: json.list\n          })\n        } else {\n          throw new Error(`Invalid 'url' format`)\n        }\n      })\n      .catch(e => { throw e })\n  }\n\n  render () {\n    const { options, showButtonStyle } = this.state\n    const props = getProps(this.props, [\n      'disabled'\n    ])\n    const children = []\n    for (const option of options) {\n      const { label, value } = option\n      if (showButtonStyle) {\n        children.push(<RadioButton key={value} value={value}>{label}</RadioButton>)\n      } else {\n        children.push(<Radio key={value} value={value}>{label}</Radio>)\n      }\n    }\n    return (\n      <RadioGroup {...props}>{children}</RadioGroup>\n    )\n  }\n}\n"],"file":"radio.js"}