{"version":3,"sources":["../../../src/FanoForm/types/radio.jsx"],"names":["RadioButton","Button","RadioGroup","Group","FanoFormRadio","props","injectProps","field","url","dict","options","showButtonStyle","state","dictUrl","c","_","isEmpty","fetchOptions","Error","qs","stringify","cond","code","beforeFetch","isFunction","then","Array","isArray","get","json","setState","list","catch","e","children","option","label","value","push","React","Component"],"mappings":"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","file":"radio.js","sourcesContent":["import React from 'react'\nimport qs from 'qs'\nimport { Radio } from 'antd'\nimport _ from 'lodash'\nimport { get } from '../../utils/request'\nimport { getProps } from '../../utils/form'\n\nconst RadioButton = Radio.Button\nconst RadioGroup = Radio.Group\n\nexport default class FanoFormRadio extends React.Component {\n  constructor (props) {\n    super(props)\n    const { url, dict, options = [], showButtonStyle = false } = props.injectProps.field.props\n    this.state = {\n      url,\n      dict,\n      options,\n      showButtonStyle\n    }\n  }\n\n  componentDidMount () {\n    const { dictUrl } = this.props.injectProps.c\n    if (_.isEmpty(this.state.options)) {\n      if (!_.isEmpty(this.state.url)) {\n        this.fetchOptions(this.state.url)\n      } else if (!_.isEmpty(this.state.dict)) {\n        if (_.isEmpty(dictUrl)) {\n          throw new Error(`Invalid 'dictUrl'`)\n        }\n        this.fetchOptions(`${dictUrl}?${qs.stringify({\n          cond: JSON.stringify({ code: this.state.dict }, null, 0)\n        })}`)\n      }\n    }\n  }\n\n  fetchOptions (url) {\n    const { beforeFetch } = this.props.injectProps.field.props\n    if (_.isFunction(beforeFetch)) {\n      url = beforeFetch(url, this.props.injectProps.field)\n    }\n    get(url)\n      .then(json => {\n        if (Array.isArray(_.get(json, 'list'))) {\n          this.setState({\n            options: json.list\n          })\n        } else {\n          throw new Error(`Invalid 'url' format`)\n        }\n      })\n      .catch(e => { throw e })\n  }\n\n  render () {\n    const { options, showButtonStyle } = this.state\n    const props = getProps(this.props, [\n      'disabled'\n    ])\n    const children = []\n    for (const option of options) {\n      const { label, value } = option\n      if (showButtonStyle) {\n        children.push(<RadioButton key={value} value={value}>{label}</RadioButton>)\n      } else {\n        children.push(<Radio key={value} value={value}>{label}</Radio>)\n      }\n    }\n    return (\n      <RadioGroup {...props}>{children}</RadioGroup>\n    )\n  }\n}\n"]}