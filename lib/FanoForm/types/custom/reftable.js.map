{"version":3,"sources":["../../../../src/FanoForm/types/custom/reftable.jsx"],"names":["FanoFormRefTable","props","field","injectProps","columns","map","item","width","key","dataIndex","_","merge","columnsExpand","state","visible","loading","rowKey","dataSource","list","onClick","bind","handleOk","handleCancel","fetchData","setState","query","qs","stringify","page","size","url","listUrl","lastIndexOf","headers","data","record","value","onChange","cursor","label","y","handleRowClick","current","pageSize","total","totalrecords","React","Component"],"mappings":"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","file":"reftable.js","sourcesContent":["import React from 'react'\nimport _ from 'lodash'\nimport qs from 'qs'\nimport { Input, Icon, Modal, Table } from 'antd'\nimport { getProps } from '../../../utils/form'\nimport { get } from '../../../utils/request'\n\nexport default class FanoFormRefTable extends React.Component {\n  constructor (props) {\n    super(props)\n    const { field } = this.props.injectProps\n    const columns = field.props.columns.map(item => {\n      item.width = item.width || 150\n      item.key = item.key || item.dataIndex\n      _.merge(item, field.props.columnsExpand[item.dataIndex])\n      return item\n    })\n    this.state = {\n      visible: false,\n      loading: false,\n      columns,\n      rowKey: field.props.rowKey || '_id',\n      dataSource: {\n        list: []\n      }\n    }\n    this.onClick = this.onClick.bind(this)\n    this.handleOk = this.handleOk.bind(this)\n    this.handleCancel = this.handleCancel.bind(this)\n  }\n\n  componentDidMount () {\n    this.fetchData()\n  }\n\n  onClick () {\n    this.setState({\n      visible: true\n    })\n  }\n\n  async fetchData () {\n    this.setState({ loading: true })\n    const { field } = this.props.injectProps\n    const query = qs.stringify({\n      page: this.state.dataSource.page,\n      size: this.state.dataSource.size\n    })\n\n    let url = field.props.listUrl\n    if (url.lastIndexOf('?') >= 0) {\n      url = `${url}&${query}`\n    } else {\n      url = `${url}?${query}`\n    }\n    const data = await get(`${url}`, {\n      headers: field.props.headers\n    })\n    const state = { loading: false }\n    if (data) {\n      state.dataSource = data\n    }\n    this.setState(state)\n  }\n\n  handleOk () {\n    this.setState({\n      visible: false\n    })\n  }\n\n  handleCancel () {\n    this.setState({\n      visible: false\n    })\n  }\n\n  handleRowClick (record) {\n    const value = record[this.state.rowKey]\n    this.setState({\n      visible: false\n    })\n    this.props.onChange(value)\n  }\n\n  render () {\n    const { field } = this.props.injectProps\n    const props = getProps(this.props, [\n      'placeholder',\n      'disabled'\n    ])\n    return (\n      <div>\n        <Input\n          {...props}\n          addonAfter={<Icon type={'search'} onClick={this.onClick} style={{ cursor: 'pointer' }} />}\n          readOnly\n        />\n        <Modal\n          width={600}\n          title={field.label}\n          visible={this.state.visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n        >\n          <Table\n            rowKey={this.state.rowKey}\n            columns={this.state.columns}\n            dataSource={this.state.dataSource.list}\n            scroll={{ y: 240 }}\n            loading={this.state.loading}\n            onRow={record => {\n              return {\n                onClick: this.handleRowClick.bind(this, record)\n              }\n            }}\n            pagination={{\n              current: this.state.dataSource.page,\n              pageSize: this.state.dataSource.size,\n              total: this.state.dataSource.totalrecords,\n              onChange: (page, size) => {\n                const { dataSource } = this.state\n                dataSource.page = page\n                dataSource.size = size\n                this.setState({ dataSource }, this.fetchData)\n              }\n            }}\n            size={'small'}\n          />\n        </Modal>\n      </div>\n    )\n  }\n}\n"]}