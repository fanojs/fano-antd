{"version":3,"sources":["../../src/FanoForm/index.jsx"],"names":["FanoForm","c","types","text","password","hidden","number","digit","radio","checkbox","select","datepicker","monthpicker","weekpicker","timepicker","rangepicker","treeselect","reftable","imgbox","config","options","_","isPlainObject","merge","Error","fromJson","json","props","setDefaultValue","combineExpandProps","wrappedComponentRef","bind","fields","field","formRef","getFieldsValue","values","setFieldsValue","errors","setFieldsError","expandProps","expand","name","Object","assign","inst","React","Component","fromUrl","url","isString","then","Array","isArray","get","list","catch","e","fromMeta","code","metaUrl","qs","stringify","injectType","fn","isFunction"],"mappings":"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","sourcesContent":["import React from 'react'\nimport qs from 'qs'\nimport _ from 'lodash'\nimport { get } from '../utils/request'\nimport DynamicForm from './DynamicForm'\nimport text from './types/text'\nimport hidden from './types/hidden'\nimport digit from './types/digit'\nimport number from './types/number'\nimport radio from './types/radio'\nimport checkbox from './types/checkbox'\nimport password from './types/password'\nimport select from './types/select'\nimport datepicker from './types/datepicker'\nimport monthpicker from './types/monthpicker'\nimport weekpicker from './types/weekpicker'\nimport timepicker from './types/timepicker'\nimport rangepicker from './types/rangepicker'\nimport treeselect from './types/treeselect'\nimport imgbox from './types/imgbox'\n\nimport reftable from './types/custom/reftable'\n\nclass FanoForm { }\n\nFanoForm.c = {\n  types: {\n    text,\n    password,\n    hidden,\n    number,\n    digit,\n    radio,\n    checkbox,\n    select,\n    datepicker,\n    monthpicker,\n    weekpicker,\n    timepicker,\n    rangepicker,\n    treeselect,\n    reftable,\n    imgbox\n  }\n}\n\n/**\n * 全局配置\n * @param {*} options 配置项\n */\nFanoForm.config = (options) => {\n  if (_.isPlainObject(options)) {\n    _.merge(FanoForm.c, options)\n  } else {\n    throw new Error(`Invalid options`)\n  }\n}\n\n/**\n * 使用JSON配置生成表单\n * @param {*} json JSON配置\n */\nFanoForm.fromJson = (json) => {\n  return (\n    class FanoComponent extends React.Component {\n      constructor (props) {\n        super(props)\n        this.setDefaultValue(json)\n        this.combineExpandProps(json)\n        this.wrappedComponentRef = this.wrappedComponentRef.bind(this)\n      }\n\n      setDefaultValue (json) {\n        for (const field of json.fields) {\n          field.props = field.props || {}\n        }\n      }\n\n      getFieldsValue () {\n        return this.formRef.getFieldsValue()\n      }\n\n      setFieldsValue (values) {\n        return this.formRef.setFieldsValue(values)\n      }\n\n      setFieldsError (errors) {\n        return this.formRef.setFieldsError(errors)\n      }\n\n      combineExpandProps (json) {\n        const { expandProps } = this.props\n        if (!_.isPlainObject(expandProps)) {\n          return\n        }\n        for (const field of json.fields) {\n          const expand = expandProps[field.name]\n          if (_.isPlainObject(expand)) {\n            Object.assign(field.props, expand)\n          }\n        }\n      }\n\n      wrappedComponentRef (inst) {\n        this.formRef = inst\n      }\n\n      render () {\n        return (\n          <DynamicForm {...this.props}\n            c={FanoForm.c}\n            config={json}\n            wrappedComponentRef={this.wrappedComponentRef}\n          />\n        )\n      }\n    }\n  )\n}\n\n/**\n * 通过URL获取配置后再生成表单\n * @param {*} url 配置URL\n */\nFanoForm.fromUrl = (url) => {\n  if (!_.isString(url)) {\n    throw new Error(`Invalid 'url': ${url}`)\n  }\n  get(url)\n    .then(json => {\n      if (Array.isArray(_.get(json, 'list'))) {\n        FanoForm.fromJson(json.list)\n      } else {\n        throw new Error(`Invalid 'url' format`)\n      }\n    })\n    .catch(e => { throw e })\n}\n\n/**\n * 通过元数据编码获取配置后再生成表单\n * @param {*} code 元数据编码\n */\nFanoForm.fromMeta = (code) => {\n  if (!_.isString(code)) {\n    throw new Error(`Invalid code: ${code}`)\n  } else if (!_.isString(FanoForm.c.metaUrl)) {\n    throw new Error(`Invalid 'metaUrl' format`)\n  }\n  get(`${FanoForm.c.metaUrl}?${qs.stringify({ code })}`)\n    .then(json => {\n      if (Array.isArray(_.get(json, 'list'))) {\n        FanoForm.fromJson(json.list)\n      } else {\n        throw new Error(`Invalid 'metaUrl' format`)\n      }\n    })\n    .catch(e => { throw e })\n}\n\n/**\n * 注入自定义的控件类型\n * @param {*} code 类型编码\n * @param {*} fn 类型函数\n */\nFanoForm.injectType = (code, fn) => {\n  if (_.isString(code) && _.isFunction(fn)) {\n    FanoForm.c.types.code = fn\n    return true\n  }\n  return false\n}\n\nexport default FanoForm\n"],"file":"index.js"}