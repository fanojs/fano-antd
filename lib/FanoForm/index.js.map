{"version":3,"sources":["../../src/FanoForm/index.jsx"],"names":["FanoForm","c","types","text","password","hidden","number","digit","radio","checkbox","select","datepicker","monthpicker","weekpicker","timepicker","rangepicker","treeselect","reftable","imgbox","config","options","_","isPlainObject","merge","Error","fromJson","json","props","setDefaultValue","combineExpandProps","wrappedComponentRef","bind","fields","field","formRef","getFieldsValue","values","setFieldsValue","errors","setFieldsError","expandProps","expand","name","inst","React","Component","fromUrl","url","isString","then","Array","isArray","get","list","catch","e","fromMeta","code","metaUrl","qs","stringify","injectType","fn","isFunction"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react'\nimport qs from 'qs'\nimport _ from 'lodash'\nimport { get } from '../utils/request'\nimport DynamicForm from './DynamicForm'\nimport text from './types/text'\nimport hidden from './types/hidden'\nimport digit from './types/digit'\nimport number from './types/number'\nimport radio from './types/radio'\nimport checkbox from './types/checkbox'\nimport password from './types/password'\nimport select from './types/select'\nimport datepicker from './types/datepicker'\nimport monthpicker from './types/monthpicker'\nimport weekpicker from './types/weekpicker'\nimport timepicker from './types/timepicker'\nimport rangepicker from './types/rangepicker'\nimport treeselect from './types/treeselect'\nimport imgbox from './types/imgbox'\n\nimport reftable from './types/custom/reftable'\n\nclass FanoForm { }\n\nFanoForm.c = {\n  types: {\n    text,\n    password,\n    hidden,\n    number,\n    digit,\n    radio,\n    checkbox,\n    select,\n    datepicker,\n    monthpicker,\n    weekpicker,\n    timepicker,\n    rangepicker,\n    treeselect,\n    reftable,\n    imgbox\n  }\n}\n\n/**\n * 全局配置\n * @param {*} options 配置项\n */\nFanoForm.config = (options) => {\n  if (_.isPlainObject(options)) {\n    _.merge(FanoForm.c, options)\n  } else {\n    throw new Error(`Invalid options`)\n  }\n}\n\n/**\n * 使用JSON配置生成表单\n * @param {*} json JSON配置\n */\nFanoForm.fromJson = (json) => {\n  return (\n    class FanoComponent extends React.Component {\n      constructor (props) {\n        super(props)\n        this.setDefaultValue(json)\n        this.combineExpandProps(json)\n        this.wrappedComponentRef = this.wrappedComponentRef.bind(this)\n      }\n\n      setDefaultValue (json) {\n        for (const field of json.fields) {\n          field.props = field.props || {}\n        }\n      }\n\n      getFieldsValue () {\n        return this.formRef.getFieldsValue()\n      }\n\n      setFieldsValue (values) {\n        return this.formRef.setFieldsValue(values)\n      }\n\n      setFieldsError (errors) {\n        return this.formRef.setFieldsError(errors)\n      }\n\n      combineExpandProps (json) {\n        const { expandProps } = this.props\n        if (!_.isPlainObject(expandProps)) {\n          return\n        }\n        for (const field of json.fields) {\n          const expand = expandProps[field.name]\n          if (_.isPlainObject(expand)) {\n            Object.assign(field.props, expand)\n          }\n        }\n      }\n\n      wrappedComponentRef (inst) {\n        this.formRef = inst\n      }\n\n      render () {\n        return (\n          <DynamicForm {...this.props}\n            c={FanoForm.c}\n            config={json}\n            wrappedComponentRef={this.wrappedComponentRef}\n          />\n        )\n      }\n    }\n  )\n}\n\n/**\n * 通过URL获取配置后再生成表单\n * @param {*} url 配置URL\n */\nFanoForm.fromUrl = (url) => {\n  if (!_.isString(url)) {\n    throw new Error(`Invalid 'url': ${url}`)\n  }\n  get(url)\n    .then(json => {\n      if (Array.isArray(_.get(json, 'list'))) {\n        FanoForm.fromJson(json.list)\n      } else {\n        throw new Error(`Invalid 'url' format`)\n      }\n    })\n    .catch(e => { throw e })\n}\n\n/**\n * 通过元数据编码获取配置后再生成表单\n * @param {*} code 元数据编码\n */\nFanoForm.fromMeta = (code) => {\n  if (!_.isString(code)) {\n    throw new Error(`Invalid code: ${code}`)\n  } else if (!_.isString(FanoForm.c.metaUrl)) {\n    throw new Error(`Invalid 'metaUrl' format`)\n  }\n  get(`${FanoForm.c.metaUrl}?${qs.stringify({ code })}`)\n    .then(json => {\n      if (Array.isArray(_.get(json, 'list'))) {\n        FanoForm.fromJson(json.list)\n      } else {\n        throw new Error(`Invalid 'metaUrl' format`)\n      }\n    })\n    .catch(e => { throw e })\n}\n\n/**\n * 注入自定义的控件类型\n * @param {*} code 类型编码\n * @param {*} fn 类型函数\n */\nFanoForm.injectType = (code, fn) => {\n  if (_.isString(code) && _.isFunction(fn)) {\n    FanoForm.c.types.code = fn\n    return true\n  }\n  return false\n}\n\nexport default FanoForm\n"]}